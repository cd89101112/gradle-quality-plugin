{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to gradle quality plugin \u00b6 Plugin activates and configures quality tools for java and groovy projects using Checkstyle , PMD , SpotBugs , FindBugs (deprecated) , CodeNarc . Plugin unifies console output for all quality plugins which greatly simplifies developer workflow: only console is required for working with violations and makes it feel the same as java compiler errors. Note Google's error-prone is not included because checkstyle and pmd covers all error-prone checks and quality plugin makes all tools behave the same way as error-prone, but without java compiler modifications and environment specific setup . Release notes - License Main Features \u00b6 Adds extra javac lint options to see more warnings Complete and unified console output for all quality plugins Html and xml reports configured for all plugins Zero configuration by default: provided opinionated configs will make it work out of the box Easy configs customization Grouping tasks to run registered quality plugins for exact source set How to use docs \u00b6 Getting started covers installation and main usage info. Ideal for introduction. User guide section contain detailed behavior description. Good to read, but if no time, read as you need it. Configuration - configuration reference Tools section describes exact quality tool configuration and usage aspects. Use it as a hand book . Tasks section describes custom tasks.","title":"Home"},{"location":"#welcome-to-gradle-quality-plugin","text":"Plugin activates and configures quality tools for java and groovy projects using Checkstyle , PMD , SpotBugs , FindBugs (deprecated) , CodeNarc . Plugin unifies console output for all quality plugins which greatly simplifies developer workflow: only console is required for working with violations and makes it feel the same as java compiler errors. Note Google's error-prone is not included because checkstyle and pmd covers all error-prone checks and quality plugin makes all tools behave the same way as error-prone, but without java compiler modifications and environment specific setup . Release notes - License","title":"Welcome to gradle quality plugin"},{"location":"#main-features","text":"Adds extra javac lint options to see more warnings Complete and unified console output for all quality plugins Html and xml reports configured for all plugins Zero configuration by default: provided opinionated configs will make it work out of the box Easy configs customization Grouping tasks to run registered quality plugins for exact source set","title":"Main Features"},{"location":"#how-to-use-docs","text":"Getting started covers installation and main usage info. Ideal for introduction. User guide section contain detailed behavior description. Good to read, but if no time, read as you need it. Configuration - configuration reference Tools section describes exact quality tool configuration and usage aspects. Use it as a hand book . Tasks section describes custom tasks.","title":"How to use docs"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Note When updating plugin version in your project don't forget to call clean task to remove cached configs from previous plugin version Plugin is available from maven central, bintray jcenter and gradle plugins portal . buildscript { repositories { jcenter () gradlePluginPortal () } dependencies { classpath 'ru.vyarus:gradle-quality-plugin:3.4.0' } } apply plugin: 'ru.vyarus.quality' OR plugins { id 'ru.vyarus.quality' version '3.4.0' } Warning Plugin must be applied after java or groovy plugins. Otherwise it will do nothing. Note Plugin itself is compiled for java 7, but java quality tools require java 8 so, by default, you will need java 8 for java. Groovy project will work on java 7. If you are using lower java versions use previous plugin releases. Usage \u00b6 Plugin will auto detect java and groovy sources and activate required quality plugins. All tools will be configured with the default opinionated configs. $ gradlew check Will execute all quality plugins. Alternatively, you can use grouping task to run checks without tests. If any violations were found then build will fail with all violations printed to console. For example like this: 23 PMD rule violations were found in 2 files [Comments | CommentRequired] sample.(Sample.java:3) headerCommentRequirement Required https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired ... Or you can use build task (which also calls check): $ gradlew build Tip It's better to fix all quality issues before commit. Non strict mode \u00b6 You can switch off strict mode to avoid build failure when quality violations are found: quality { strict = false } You will still see all violations in the output. Suppress \u00b6 Sometimes (quite rare) tool could be wrong or your situation could require violation break. In this case violation could be suppressed: see exact tool page for suppression hints.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Note When updating plugin version in your project don't forget to call clean task to remove cached configs from previous plugin version Plugin is available from maven central, bintray jcenter and gradle plugins portal . buildscript { repositories { jcenter () gradlePluginPortal () } dependencies { classpath 'ru.vyarus:gradle-quality-plugin:3.4.0' } } apply plugin: 'ru.vyarus.quality' OR plugins { id 'ru.vyarus.quality' version '3.4.0' } Warning Plugin must be applied after java or groovy plugins. Otherwise it will do nothing. Note Plugin itself is compiled for java 7, but java quality tools require java 8 so, by default, you will need java 8 for java. Groovy project will work on java 7. If you are using lower java versions use previous plugin releases.","title":"Installation"},{"location":"getting-started/#usage","text":"Plugin will auto detect java and groovy sources and activate required quality plugins. All tools will be configured with the default opinionated configs. $ gradlew check Will execute all quality plugins. Alternatively, you can use grouping task to run checks without tests. If any violations were found then build will fail with all violations printed to console. For example like this: 23 PMD rule violations were found in 2 files [Comments | CommentRequired] sample.(Sample.java:3) headerCommentRequirement Required https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired ... Or you can use build task (which also calls check): $ gradlew build Tip It's better to fix all quality issues before commit.","title":"Usage"},{"location":"getting-started/#non-strict-mode","text":"You can switch off strict mode to avoid build failure when quality violations are found: quality { strict = false } You will still see all violations in the output.","title":"Non strict mode"},{"location":"getting-started/#suppress","text":"Sometimes (quite rare) tool could be wrong or your situation could require violation break. In this case violation could be suppressed: see exact tool page for suppression hints.","title":"Suppress"},{"location":"about/history/","text":"3.4.0 (2019-02-16) \u00b6 Fix source files root detection (#13) Set spotbugs tasks default heap size to 1g to mimic old behaviour in gradle 5 (#12) Update pmd 6.9.0 -> 6.11.0 Update checkstyle 8.14 -> 8.17 Update spotbugs 3.1.9 -> 3.1.11 Update codenarc 1.2.1 -> 1.3 Update codenarc config: Add new ruleset Comments Disable new rule ClassStartsWithBlankLine Disable new rule ClassEndsWithBlankLine 3.3.0 (2018-11-23) \u00b6 Update pmd config: Allow camel cased enum constants for FieldNamingConventions Update spotbugs 3.1.6 -> 3.1.9 Update com.github.spotbugs plugin 1.6.3 -> 1.6.5 Update checkstyle 8.12 -> 8.14 Update pmd 6.7.0 -> 6.9.0 3.2.0 (2018-09-11) \u00b6 Gradle 4.10 compatibility: updated com.github.spotbugs plugin 1.6.2 -> 1.6.3 Update checkstyle 8.11 -> 8.12 Update pmd 6.5.0 -> 6.7.0 Update codenarc 1.2 -> 1.2.1 3.1.1 (2018-07-22) \u00b6 Fix maven central and jcenter artifacts (missed dependency) (#9) Update spotbugs 3.1.5 -> 3.1.6 3.1.0 (2018-07-13) \u00b6 Gradle 4.8 compatibility: updated com.github.spotbugs plugin 1.6.1 -> 1.6.2 fix exclusions support Update checkstyle 8.8 -> 8.11 Update checkstyle config: New check LambdaParameterName Update pmd 6.1.0 -> 6.5.0 Update pmd config: Disable ClassNamingConventions Update spotbugs 3.1.2 -> 3.1.5 Update codenarc 1.1 -> 1.2 Update codenarc config: Disable new check NoJavaUtilDate Option to disable html reports: quality.htmlReports=false (#5) 3.0.0 (2018-03-25) \u00b6 Update codenarc 1.0 -> 1.1 Update checkstyle 8.2 -> 8.8 Update pmd 5.8.1 -> 6.1.0 Update pmd config: (breaking) All rules reordered according to new groups Disable CommentDefaultAccessModifier as not useful Disable ExcessiveClassLength and ExcessiveMethodLength in favor of new rule NcssCount (which counts lengths without empty lines and comments) Defaults for NcssCount (which counts length without empty lines and comments) changed: 30 lines for method and 300 for class (with previous Excessive* rules it was 50 and 500 accordingly) Disable new rule DataClass as too strict for general cases Switch from ModifiedCyclomaticComplexity (deprecated) to CyclomaticComplexity with ignoreBooleanPaths option (breaking) use Spotbugs (3.1.2) instead of Findbugs by default (as successor ) com.github.spotbugs external plugin applied (quality plugin brings it as a dependency) Spotbugs plugin will use configs from different folder (spotbugs/), so if custom findbugs configs were used move them to spotbugs/ folder Findbugs support is deprecated and will be removed someday (but not soon). To use findbugs (as before): disable spotbugs support (quality.spotbugs = false) or enable findbugs plugin manually (in this case spotbugs plugin will not be registered) Update spotbugs exclusions: Exclude NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION check as it prevents @Nullable override, which may be required for guava functions Exclude NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE check as misleading and not useful 2.4.0 (2017-09-21) \u00b6 Support gradle 4.2 (#3) Update checkstyle 8.0 -> 8.2 Update codenarc 0.27.0 -> 1.0 Update checkstyle config: Move SuppressionCommentFilter inside TreeWalker (8.1 breaking change) Remove FileContentsHolder (8.2 breaking change) New check AnnotationOnSameLine (added in 8.2) added to config, but disabled 2.3.0 (2017-07-24) \u00b6 Update checkstyle 7.6 -> 8.0 Update pmd 5.5.4 -> 5.8.1 Update pmd config: Add description to avoid warning Disable AccessorMethodGeneration check as it makes sense for android projects and not so important for java. Moreover, possible fixes will contradict with checkstyle's VisibilityModifier 2.2.0 (2017-03-21) \u00b6 Update checkstyle 7.4 -> 7.6 Update pmd 5.5.2 -> 5.5.4 Update codenarc 0.26.0 -> 0.27.0 Update pmd config: Disable NullAssignment check due to false positives Add unified exclusion patterns (glob) configuration: exclude (#2) Does not affect animalsniffer because it's a different type of check Findbugs did not support direct exclusions, so plugin resolves excluded classes and adds them to exclusion xml (default or user defined) Add configuration to directly exclude source files from check (for exceptional cases when pattern exclusion cant help): excludeSources Does not affect animalsniffer For findbugs excluded classes will be added to exclusions xml filter 2.1.0 (2017-01-24) \u00b6 Update checkstyle 7.1 -> 7.4 Update pmd 5.5.1 -> 5.5.2 Update codenarc 0.25.2 -> 0.26.0 Update pmd config: Disable junit4 migration rules which cause false positives for non test code: JUnit4TestShouldUseBeforeAnnotation , JUnit4TestShouldUseAfterAnnotation , JUnit4TestShouldUseTestAnnotation 2.0.0 (2016-09-03) \u00b6 Update checkstyle 6.17 -> 7.1 (requires min jdk 8) Update checkstyle config: Add SingleSpaceSeparator check (since 6.19) Disable FileLength check in favour of more correct PMD ExcessiveClassLength check (which checks actual class length not file) Enable ReturnCount to replace pmd OnlyOneReturn check Update pmd 5.4.1 -> 5.5.1 (requires min jdk 7) Update pmd config: Disable UselessParentheses because of too many false positives Disable OnlyOneReturn in favour of checkstyle ReturnCount Disable InvalidSlf4jMessageFormat due to known bug Disable CyclomaticComplexity and StdCyclomaticComplexity as duplicate rules for ModifiedCyclomaticComplexity Update codenarc 0.25.1 -> 0.25.2 (breaking) quality.lintOptions configuration now applies to all JavaCompile tasks (not only to compileJava as before) Fix multi-module projects reporting (remove duplicate reports) Fix generated html reports links (redundant slash on linux) Fix newline in reporters (use platform specific) Change reporting format so intelliJ IDEA can recognize class reference and show link (eclipse will probably too). Reference line ranges are not shown anymore (pmd, findbugs and column in checkstyle) - always exact line. (breaking) configure manually registered plugins, even if plugin not supposed to be used due to sources auto detection. Configuration may be disabled using quality configuration flags. Add ability to disable automatic plugins registration: quality.autoRegistration = false. Only manually registered plugins will be configured. Add ability to disable quality tasks with configuration property: quality.enabled = false. Quality tasks will still work if called directly or through grouping task (e.g. checkQualityMain). (breaking) Remove checkstyle html report generation: gradle can generate html report since 2.10 and when gradle generates html report, it puts link to it into main error message Findbugs html report is always generated (not only when errors found like before) Add ability to disable console reporting with configuration property: quality.consoleReporting = false Add grouping tasks for registered quality plugins: checkQualityMain, checkQualityTest (per source set). Allows running quality tasks for exact source set or run quality tasks not enabled for 'check' task. 1.3.0 (2016-03-30) \u00b6 Update checkstyle 6.14.1 -> 6.17 Update codenarc 0.24.1 -> 0.25.1 Disable default checkstyle html report (enabled in gradle >=2.10) to avoid duplicate report generation Add reporting execution time logging (visible with --info option) Update default checkstyle config: Disable Misc/UncommentedMain 1.2.0 (2016-01-01) \u00b6 Update default configs: Disable Pmd/Controversial/AvoidFinalLocalVariable Pmd/Design/AvoidDeeplyNestedIfStmts default set to 4 Checkstyle/Coding/NestedIfDepth default set to 3 Add disabled check in config Checkstyle/Naming/CatchParameterName Update checkstyle 6.13 -> 6.14.1 1.1.1 (2015-12-24) \u00b6 Fix AnimalSniffer version configuration 1.1.0 (2015-12-21) \u00b6 Add ru.vyarus.animalsniffer plugin configuration support Improve FindBugs console output 1.0.3 (2015-12-11) \u00b6 Delay default configs copying to actual task execution to avoid problems with clean task 1.0.2 (2015-12-06) \u00b6 Unescape CodeNarc messages Update checkstyle 6.12.1 -> 6.13 Update pmd 5.4.0 -> 5.4.1 1.0.1 (2015-12-04) \u00b6 Don't activate CodeNarc if groovy plugin enabled but no groovy sources folder exists 1.0.0 (2015-11-19) \u00b6 Initial release","title":"Release notes"},{"location":"about/history/#340-2019-02-16","text":"Fix source files root detection (#13) Set spotbugs tasks default heap size to 1g to mimic old behaviour in gradle 5 (#12) Update pmd 6.9.0 -> 6.11.0 Update checkstyle 8.14 -> 8.17 Update spotbugs 3.1.9 -> 3.1.11 Update codenarc 1.2.1 -> 1.3 Update codenarc config: Add new ruleset Comments Disable new rule ClassStartsWithBlankLine Disable new rule ClassEndsWithBlankLine","title":"3.4.0  (2019-02-16)"},{"location":"about/history/#330-2018-11-23","text":"Update pmd config: Allow camel cased enum constants for FieldNamingConventions Update spotbugs 3.1.6 -> 3.1.9 Update com.github.spotbugs plugin 1.6.3 -> 1.6.5 Update checkstyle 8.12 -> 8.14 Update pmd 6.7.0 -> 6.9.0","title":"3.3.0 (2018-11-23)"},{"location":"about/history/#320-2018-09-11","text":"Gradle 4.10 compatibility: updated com.github.spotbugs plugin 1.6.2 -> 1.6.3 Update checkstyle 8.11 -> 8.12 Update pmd 6.5.0 -> 6.7.0 Update codenarc 1.2 -> 1.2.1","title":"3.2.0 (2018-09-11)"},{"location":"about/history/#311-2018-07-22","text":"Fix maven central and jcenter artifacts (missed dependency) (#9) Update spotbugs 3.1.5 -> 3.1.6","title":"3.1.1 (2018-07-22)"},{"location":"about/history/#310-2018-07-13","text":"Gradle 4.8 compatibility: updated com.github.spotbugs plugin 1.6.1 -> 1.6.2 fix exclusions support Update checkstyle 8.8 -> 8.11 Update checkstyle config: New check LambdaParameterName Update pmd 6.1.0 -> 6.5.0 Update pmd config: Disable ClassNamingConventions Update spotbugs 3.1.2 -> 3.1.5 Update codenarc 1.1 -> 1.2 Update codenarc config: Disable new check NoJavaUtilDate Option to disable html reports: quality.htmlReports=false (#5)","title":"3.1.0 (2018-07-13)"},{"location":"about/history/#300-2018-03-25","text":"Update codenarc 1.0 -> 1.1 Update checkstyle 8.2 -> 8.8 Update pmd 5.8.1 -> 6.1.0 Update pmd config: (breaking) All rules reordered according to new groups Disable CommentDefaultAccessModifier as not useful Disable ExcessiveClassLength and ExcessiveMethodLength in favor of new rule NcssCount (which counts lengths without empty lines and comments) Defaults for NcssCount (which counts length without empty lines and comments) changed: 30 lines for method and 300 for class (with previous Excessive* rules it was 50 and 500 accordingly) Disable new rule DataClass as too strict for general cases Switch from ModifiedCyclomaticComplexity (deprecated) to CyclomaticComplexity with ignoreBooleanPaths option (breaking) use Spotbugs (3.1.2) instead of Findbugs by default (as successor ) com.github.spotbugs external plugin applied (quality plugin brings it as a dependency) Spotbugs plugin will use configs from different folder (spotbugs/), so if custom findbugs configs were used move them to spotbugs/ folder Findbugs support is deprecated and will be removed someday (but not soon). To use findbugs (as before): disable spotbugs support (quality.spotbugs = false) or enable findbugs plugin manually (in this case spotbugs plugin will not be registered) Update spotbugs exclusions: Exclude NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION check as it prevents @Nullable override, which may be required for guava functions Exclude NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE check as misleading and not useful","title":"3.0.0 (2018-03-25)"},{"location":"about/history/#240-2017-09-21","text":"Support gradle 4.2 (#3) Update checkstyle 8.0 -> 8.2 Update codenarc 0.27.0 -> 1.0 Update checkstyle config: Move SuppressionCommentFilter inside TreeWalker (8.1 breaking change) Remove FileContentsHolder (8.2 breaking change) New check AnnotationOnSameLine (added in 8.2) added to config, but disabled","title":"2.4.0 (2017-09-21)"},{"location":"about/history/#230-2017-07-24","text":"Update checkstyle 7.6 -> 8.0 Update pmd 5.5.4 -> 5.8.1 Update pmd config: Add description to avoid warning Disable AccessorMethodGeneration check as it makes sense for android projects and not so important for java. Moreover, possible fixes will contradict with checkstyle's VisibilityModifier","title":"2.3.0 (2017-07-24)"},{"location":"about/history/#220-2017-03-21","text":"Update checkstyle 7.4 -> 7.6 Update pmd 5.5.2 -> 5.5.4 Update codenarc 0.26.0 -> 0.27.0 Update pmd config: Disable NullAssignment check due to false positives Add unified exclusion patterns (glob) configuration: exclude (#2) Does not affect animalsniffer because it's a different type of check Findbugs did not support direct exclusions, so plugin resolves excluded classes and adds them to exclusion xml (default or user defined) Add configuration to directly exclude source files from check (for exceptional cases when pattern exclusion cant help): excludeSources Does not affect animalsniffer For findbugs excluded classes will be added to exclusions xml filter","title":"2.2.0 (2017-03-21)"},{"location":"about/history/#210-2017-01-24","text":"Update checkstyle 7.1 -> 7.4 Update pmd 5.5.1 -> 5.5.2 Update codenarc 0.25.2 -> 0.26.0 Update pmd config: Disable junit4 migration rules which cause false positives for non test code: JUnit4TestShouldUseBeforeAnnotation , JUnit4TestShouldUseAfterAnnotation , JUnit4TestShouldUseTestAnnotation","title":"2.1.0 (2017-01-24)"},{"location":"about/history/#200-2016-09-03","text":"Update checkstyle 6.17 -> 7.1 (requires min jdk 8) Update checkstyle config: Add SingleSpaceSeparator check (since 6.19) Disable FileLength check in favour of more correct PMD ExcessiveClassLength check (which checks actual class length not file) Enable ReturnCount to replace pmd OnlyOneReturn check Update pmd 5.4.1 -> 5.5.1 (requires min jdk 7) Update pmd config: Disable UselessParentheses because of too many false positives Disable OnlyOneReturn in favour of checkstyle ReturnCount Disable InvalidSlf4jMessageFormat due to known bug Disable CyclomaticComplexity and StdCyclomaticComplexity as duplicate rules for ModifiedCyclomaticComplexity Update codenarc 0.25.1 -> 0.25.2 (breaking) quality.lintOptions configuration now applies to all JavaCompile tasks (not only to compileJava as before) Fix multi-module projects reporting (remove duplicate reports) Fix generated html reports links (redundant slash on linux) Fix newline in reporters (use platform specific) Change reporting format so intelliJ IDEA can recognize class reference and show link (eclipse will probably too). Reference line ranges are not shown anymore (pmd, findbugs and column in checkstyle) - always exact line. (breaking) configure manually registered plugins, even if plugin not supposed to be used due to sources auto detection. Configuration may be disabled using quality configuration flags. Add ability to disable automatic plugins registration: quality.autoRegistration = false. Only manually registered plugins will be configured. Add ability to disable quality tasks with configuration property: quality.enabled = false. Quality tasks will still work if called directly or through grouping task (e.g. checkQualityMain). (breaking) Remove checkstyle html report generation: gradle can generate html report since 2.10 and when gradle generates html report, it puts link to it into main error message Findbugs html report is always generated (not only when errors found like before) Add ability to disable console reporting with configuration property: quality.consoleReporting = false Add grouping tasks for registered quality plugins: checkQualityMain, checkQualityTest (per source set). Allows running quality tasks for exact source set or run quality tasks not enabled for 'check' task.","title":"2.0.0 (2016-09-03)"},{"location":"about/history/#130-2016-03-30","text":"Update checkstyle 6.14.1 -> 6.17 Update codenarc 0.24.1 -> 0.25.1 Disable default checkstyle html report (enabled in gradle >=2.10) to avoid duplicate report generation Add reporting execution time logging (visible with --info option) Update default checkstyle config: Disable Misc/UncommentedMain","title":"1.3.0 (2016-03-30)"},{"location":"about/history/#120-2016-01-01","text":"Update default configs: Disable Pmd/Controversial/AvoidFinalLocalVariable Pmd/Design/AvoidDeeplyNestedIfStmts default set to 4 Checkstyle/Coding/NestedIfDepth default set to 3 Add disabled check in config Checkstyle/Naming/CatchParameterName Update checkstyle 6.13 -> 6.14.1","title":"1.2.0 (2016-01-01)"},{"location":"about/history/#111-2015-12-24","text":"Fix AnimalSniffer version configuration","title":"1.1.1 (2015-12-24)"},{"location":"about/history/#110-2015-12-21","text":"Add ru.vyarus.animalsniffer plugin configuration support Improve FindBugs console output","title":"1.1.0 (2015-12-21)"},{"location":"about/history/#103-2015-12-11","text":"Delay default configs copying to actual task execution to avoid problems with clean task","title":"1.0.3 (2015-12-11)"},{"location":"about/history/#102-2015-12-06","text":"Unescape CodeNarc messages Update checkstyle 6.12.1 -> 6.13 Update pmd 5.4.0 -> 5.4.1","title":"1.0.2 (2015-12-06)"},{"location":"about/history/#101-2015-12-04","text":"Don't activate CodeNarc if groovy plugin enabled but no groovy sources folder exists","title":"1.0.1 (2015-12-04)"},{"location":"about/history/#100-2015-11-19","text":"Initial release","title":"1.0.0 (2015-11-19)"},{"location":"about/license/","text":"The MIT License (MIT) Copyright \u00a9 2015 Vyacheslav Rusakov Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"guide/automatic/","text":"Automatic mode \u00b6 By default, plugin works in automatic mode an does not require configuration to run. Plugins \u00b6 Java quality tool plugins will be activated if java sources are present ( src/main/java ): Checkstyle , PMD and SpotBugs (or FindBugs ). Groovy quality plugins will be activated if groovy sources are present ( src/main/groovy ): CodeNarc If you have both java and groovy sources then all plugins will be enabled (and they will not conflict). If animalsniffer plugin was manually registered then it would be configured the same way as other quality plugins (quality configuration unification). Scope \u00b6 All quality plugins register a check task per source set. For example, checkstyleMain , checkstyleTest . But check task depend only on quality tasks from configured scopes. By default, all activated plugins will check only main source set: only *Main quality tasks will be executed during check (or build ). You can call quality task for not configured source set manually (e.g. checkstyleTest ). Hint To enable test sources check: quality.sourceSets = [sourceSets.main, sourceSets.test] Hint To run all checks for source set use grouping task Configs \u00b6 Plugin provides default configs for all tools. These configs are opinionated: not all possible checks are enabled, just the sane majority of them. Also, some defaults were changed. Anyway, all disabled checks are commented in config files, so it would be clear what was disabled. You can modify one or more configs with initConfigsTask . Manually registered plugins configuration \u00b6 If you register any quality plugin manually then it will be configured even if it's not supposed to be registered by project sources. For example, project contains only java sources ( /src/main/java ) and codenarc plugin registered manually: plugins { id 'groovy' id 'codenarc' id 'ru.vyarus.quality' } Then quality plugin will register checkstyle, pmd and spotbugs (findbugs) plugins and configure codenarc plugin (which is not supposed to be used according to current sources). To prevent manually registered plugin configuration use referenced quality option. For example, to prevent codenarc plugin configuration in example above: quality { codenarc = false }","title":"Automatic mode"},{"location":"guide/automatic/#automatic-mode","text":"By default, plugin works in automatic mode an does not require configuration to run.","title":"Automatic mode"},{"location":"guide/automatic/#plugins","text":"Java quality tool plugins will be activated if java sources are present ( src/main/java ): Checkstyle , PMD and SpotBugs (or FindBugs ). Groovy quality plugins will be activated if groovy sources are present ( src/main/groovy ): CodeNarc If you have both java and groovy sources then all plugins will be enabled (and they will not conflict). If animalsniffer plugin was manually registered then it would be configured the same way as other quality plugins (quality configuration unification).","title":"Plugins"},{"location":"guide/automatic/#scope","text":"All quality plugins register a check task per source set. For example, checkstyleMain , checkstyleTest . But check task depend only on quality tasks from configured scopes. By default, all activated plugins will check only main source set: only *Main quality tasks will be executed during check (or build ). You can call quality task for not configured source set manually (e.g. checkstyleTest ). Hint To enable test sources check: quality.sourceSets = [sourceSets.main, sourceSets.test] Hint To run all checks for source set use grouping task","title":"Scope"},{"location":"guide/automatic/#configs","text":"Plugin provides default configs for all tools. These configs are opinionated: not all possible checks are enabled, just the sane majority of them. Also, some defaults were changed. Anyway, all disabled checks are commented in config files, so it would be clear what was disabled. You can modify one or more configs with initConfigsTask .","title":"Configs"},{"location":"guide/automatic/#manually-registered-plugins-configuration","text":"If you register any quality plugin manually then it will be configured even if it's not supposed to be registered by project sources. For example, project contains only java sources ( /src/main/java ) and codenarc plugin registered manually: plugins { id 'groovy' id 'codenarc' id 'ru.vyarus.quality' } Then quality plugin will register checkstyle, pmd and spotbugs (findbugs) plugins and configure codenarc plugin (which is not supposed to be used according to current sources). To prevent manually registered plugin configuration use referenced quality option. For example, to prevent codenarc plugin configuration in example above: quality { codenarc = false }","title":"Manually registered plugins configuration"},{"location":"guide/config/","text":"Configuration \u00b6 Use quality closure to configure plugin. Defaults: quality { // Tools versions checkstyleVersion = '8.17' pmdVersion = '6.11.0' spotbugsVersion = '3.1.11' codenarcVersion = '1.3' animalsnifferVersion /** * When disabled, quality plugins will not be registered automatically (according to sources). * Only manually registered quality plugins will be configured. */ autoRegistration = true // Enable/disable tools (when auto registration disabled control configuration appliance) checkstyle = true pmd = true // when spotbugs disabled, findbugs plugin is used by default spotbugs = true codenarc = true /** * The analysis effort level. The value specified should be one of min, default, or max. * Higher levels increase precision and find more bugs at the expense of running time and * memory consumption. Default is 'max'. */ spotbugsEffort = 'max' /** * The priority threshold for reporting bugs. If set to low, all bugs are reported. * If set to medium, medium and high priority bugs are reported. * If set to high, only high priority bugs are reported. Default is 'medium'. */ spotbugsLevel = 'medium' /** * Javac lint options to show compiler warnings, not visible by default. * Applies to all CompileJava tasks. * Options will be added as -Xlint:option * Full list of options: http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCJCABJ */ lintOptions = [ 'deprecation' , 'unchecked' ] /** * Strict quality leads to build fail on any violation found. If disabled, all violation * are just printed to console. */ strict = true /** * When false, disables quality tasks execution. Allows disabling tasks without removing plugins. * Quality tasks are still registered, but skip execution, except when task called directly or through * checkQualityMain (or other source set) grouping task. */ enabled = true /** * When false, disables reporting quality issues to console. Only gradle general error messages will * remain in logs. This may be useful in cases when project contains too many warnings. * Also, console reporting require xml reports parsing, which could be time consuming in case of too * many errors (large xml reports). * True by default. */ consoleReporting = true /** * When false, no html reports will be built. True by default. */ htmlReports = true /** * Source sets to apply checks on. * Default is [sourceSets.main] to apply only for project sources, excluding tests. */ sourceSets = [ project . sourceSets . main ] /** * Source patterns (relative to source dir) to exclude from checks. Simply sets exclusions to quality tasks. * * Animalsniffer is not affected because * it's a different kind of check (and, also, it operates on classes so source patterns may not comply). * * Spotbugs (Findbugs) does not support exclusion directly, but plugin will resolve excluded classes and apply * them to xml exclude file (default one or provided by user). * * By default nothing is excluded. * * IMPORTANT: Patterns are checked relatively to source set dirs (not including them). So you can only * match source files and packages, but not absolute file path (this is gradle specific, not plugin). * * @see org.gradle.api.tasks.SourceTask#exclude(java.lang.Iterable) (base class for all quality tasks) */ exclude = [] /** * Direct sources to exclude from checks (except animalsniffer). * This is useful as last resort, when extension or package is not enough for filtering. * Use {@link Project#files(java.lang.Object)} or {@link Project#fileTree(java.lang.Object)} * to create initial collections and apply filter on it (using * {@link org.gradle.api.file.FileTree#matching(groovy.lang.Closure)}). * * Plugin will include files into spotbugs (findbugs) exclusion filter xml (default one or provided by user). * * Note: this must be used when excluded classes can't be extracted to different source set and * filter by package and filename is not sufficient. */ FileCollection excludeSources /** * User configuration files directory. Files in this directory will be used instead of default (bundled) configs. */ configDir = 'gradle/config/' // Deprecated due to switch to SpotBugs by default findbugsVersion = '3.0.1' findbugs = true findbugsEffort = 'max' findbugsLevel = 'medium' } Manual mode \u00b6 You can disable automatic quality plugins registration (guided by source detection) and register required plugins manually: plugins { id 'groovy' id 'checkstyle' id 'pmd' } quality { autoRegistration = false } Here checkstyle and pmd plugins will be configured and no other plugins will be registered. Disable console output \u00b6 In some cases it may not be desired to see errors in console. For example, when quality control applied on existing project and you have thousands of warnings. quality { consoleReporting = false } Warning Don't turn off console warnings in other cases: people tend to ignore problems they didn't see (practice shows that normally almost no one looks html reports of quality tools). You must see warnings for each build to finally fix them all someday (or fix them as they appear). Console reporting use xml reports, produced by quality plugins. In case of too many errors, xml parsing could slow down build. You may use reporting disabling to speed up build a bit. In most cases (when you don't have thousands of errors) console reporting will be fast . Html reports \u00b6 By default, all plugins are configured to generate both xml and html reports. Xml report is required for console output and html report preserved for consultation. If you don't need html reports (e.g. on ci server) they could be disabled: quality { htmlReports = false } Disable quality plugins \u00b6 If you want to disable all quality checks: quality { enabled = false } This will disable all quality tasks (by setting task.enabled = false for each quality task). Quality tasks will still be visible, but marked as SKIPPED on execution. Note enable state will not affect tasks called directly. For example, you set quality.enabled = false and call checkstyleMain - it will be executed. Motivation is simple - if you call task directly then you want it to work. Also, enabled state not affects quality tasks when quality grouping tasks called. For example, if you call checkQualityMain - all quality plugins will be executed, even if disabled in configuration. Motivation is the same as with direct call - you obviously want to perform quality checks. Note if quality grouping task called as dependency of other task, quality plugins will be skipped. Exceptions applies only to direct cases when expected behaviour is obvious. Configuration override \u00b6 It is still possible to configure quality plugins, but direct configuration closures will not work: Fail checkstyle { // will not work, because plugin will override it ... } But will work like this: Success afterEvaluation { checkstyle { // will be applied after plugin and override configuration ... } } For plugins configuration options look: CheckstyleExtension PmdExtension SpotBugsExtension FindBugsExtension CodeNarcExtension","title":"Configuration"},{"location":"guide/config/#configuration","text":"Use quality closure to configure plugin. Defaults: quality { // Tools versions checkstyleVersion = '8.17' pmdVersion = '6.11.0' spotbugsVersion = '3.1.11' codenarcVersion = '1.3' animalsnifferVersion /** * When disabled, quality plugins will not be registered automatically (according to sources). * Only manually registered quality plugins will be configured. */ autoRegistration = true // Enable/disable tools (when auto registration disabled control configuration appliance) checkstyle = true pmd = true // when spotbugs disabled, findbugs plugin is used by default spotbugs = true codenarc = true /** * The analysis effort level. The value specified should be one of min, default, or max. * Higher levels increase precision and find more bugs at the expense of running time and * memory consumption. Default is 'max'. */ spotbugsEffort = 'max' /** * The priority threshold for reporting bugs. If set to low, all bugs are reported. * If set to medium, medium and high priority bugs are reported. * If set to high, only high priority bugs are reported. Default is 'medium'. */ spotbugsLevel = 'medium' /** * Javac lint options to show compiler warnings, not visible by default. * Applies to all CompileJava tasks. * Options will be added as -Xlint:option * Full list of options: http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCJCABJ */ lintOptions = [ 'deprecation' , 'unchecked' ] /** * Strict quality leads to build fail on any violation found. If disabled, all violation * are just printed to console. */ strict = true /** * When false, disables quality tasks execution. Allows disabling tasks without removing plugins. * Quality tasks are still registered, but skip execution, except when task called directly or through * checkQualityMain (or other source set) grouping task. */ enabled = true /** * When false, disables reporting quality issues to console. Only gradle general error messages will * remain in logs. This may be useful in cases when project contains too many warnings. * Also, console reporting require xml reports parsing, which could be time consuming in case of too * many errors (large xml reports). * True by default. */ consoleReporting = true /** * When false, no html reports will be built. True by default. */ htmlReports = true /** * Source sets to apply checks on. * Default is [sourceSets.main] to apply only for project sources, excluding tests. */ sourceSets = [ project . sourceSets . main ] /** * Source patterns (relative to source dir) to exclude from checks. Simply sets exclusions to quality tasks. * * Animalsniffer is not affected because * it's a different kind of check (and, also, it operates on classes so source patterns may not comply). * * Spotbugs (Findbugs) does not support exclusion directly, but plugin will resolve excluded classes and apply * them to xml exclude file (default one or provided by user). * * By default nothing is excluded. * * IMPORTANT: Patterns are checked relatively to source set dirs (not including them). So you can only * match source files and packages, but not absolute file path (this is gradle specific, not plugin). * * @see org.gradle.api.tasks.SourceTask#exclude(java.lang.Iterable) (base class for all quality tasks) */ exclude = [] /** * Direct sources to exclude from checks (except animalsniffer). * This is useful as last resort, when extension or package is not enough for filtering. * Use {@link Project#files(java.lang.Object)} or {@link Project#fileTree(java.lang.Object)} * to create initial collections and apply filter on it (using * {@link org.gradle.api.file.FileTree#matching(groovy.lang.Closure)}). * * Plugin will include files into spotbugs (findbugs) exclusion filter xml (default one or provided by user). * * Note: this must be used when excluded classes can't be extracted to different source set and * filter by package and filename is not sufficient. */ FileCollection excludeSources /** * User configuration files directory. Files in this directory will be used instead of default (bundled) configs. */ configDir = 'gradle/config/' // Deprecated due to switch to SpotBugs by default findbugsVersion = '3.0.1' findbugs = true findbugsEffort = 'max' findbugsLevel = 'medium' }","title":"Configuration"},{"location":"guide/config/#manual-mode","text":"You can disable automatic quality plugins registration (guided by source detection) and register required plugins manually: plugins { id 'groovy' id 'checkstyle' id 'pmd' } quality { autoRegistration = false } Here checkstyle and pmd plugins will be configured and no other plugins will be registered.","title":"Manual mode"},{"location":"guide/config/#disable-console-output","text":"In some cases it may not be desired to see errors in console. For example, when quality control applied on existing project and you have thousands of warnings. quality { consoleReporting = false } Warning Don't turn off console warnings in other cases: people tend to ignore problems they didn't see (practice shows that normally almost no one looks html reports of quality tools). You must see warnings for each build to finally fix them all someday (or fix them as they appear). Console reporting use xml reports, produced by quality plugins. In case of too many errors, xml parsing could slow down build. You may use reporting disabling to speed up build a bit. In most cases (when you don't have thousands of errors) console reporting will be fast .","title":"Disable console output"},{"location":"guide/config/#html-reports","text":"By default, all plugins are configured to generate both xml and html reports. Xml report is required for console output and html report preserved for consultation. If you don't need html reports (e.g. on ci server) they could be disabled: quality { htmlReports = false }","title":"Html reports"},{"location":"guide/config/#disable-quality-plugins","text":"If you want to disable all quality checks: quality { enabled = false } This will disable all quality tasks (by setting task.enabled = false for each quality task). Quality tasks will still be visible, but marked as SKIPPED on execution. Note enable state will not affect tasks called directly. For example, you set quality.enabled = false and call checkstyleMain - it will be executed. Motivation is simple - if you call task directly then you want it to work. Also, enabled state not affects quality tasks when quality grouping tasks called. For example, if you call checkQualityMain - all quality plugins will be executed, even if disabled in configuration. Motivation is the same as with direct call - you obviously want to perform quality checks. Note if quality grouping task called as dependency of other task, quality plugins will be skipped. Exceptions applies only to direct cases when expected behaviour is obvious.","title":"Disable quality plugins"},{"location":"guide/config/#configuration-override","text":"It is still possible to configure quality plugins, but direct configuration closures will not work: Fail checkstyle { // will not work, because plugin will override it ... } But will work like this: Success afterEvaluation { checkstyle { // will be applied after plugin and override configuration ... } } For plugins configuration options look: CheckstyleExtension PmdExtension SpotBugsExtension FindBugsExtension CodeNarcExtension","title":"Configuration override"},{"location":"guide/exclusion/","text":"Exclusions \u00b6 Exclude files from check \u00b6 All quality tasks are based on SourceTask which allows excluding sources using ant patterns. To apply exclusion to all plugins at once use: quality { exclude '**/sample/**' } Note This will not affect animalsniffer plugin, because it checks different thing (binary compatibility) and use it's own configuration to configure exclusions . Info Spotbugs (findbugs) task does not support exclusions on task level, so plugin manually resolve all excluded classes and add them to spotbugs (findbugs) excludes filter xml file (default or custom user file). As a result, exclusion works the same way for all plugins. Note Exclusion patterns are resolved on relative paths (relative to source dir), so absolute file path matching will not work. Your pattern must match just \"package\" and file name parts. If you need to exclude on full paths then use direct source exclusion . Alternative configurations \u00b6 All of the following configurations are allowed: quality { exclude '**/Sample.java' , 'com/foo/**' } quality { exclude '**/Sample.java' exclude 'com/foo/**' } quality { exclude = [ '**/Sample.java' , 'com/foo/**' ] } Direct source exclusions \u00b6 When you need to exclude sources from check, you should consider: Extract such sources into it's own source set and exclude this set from check. (generated classes case) Use pattern excludes (see above) to exclude sources based on package and (or) file name If non of the above works for you, then you did sources configuration not according to best practices. Anyway, there is last resort option for such cases (when it could not be done the right way). Suppose we have generated sources, added to main source set: sourceSets . main { java { srcDir 'build/generated/java' } } Here we have two source dirs for java sources: src/main/java and build/generated/java . We want to exclude them from quality check, so we try: Fail quality { exclude '**/generated/**' } which WILL NOT WORK because gradle applies patterns relatively to build/generated/java directory and so our patter will never match. Instead, specify ignored files directly, using rich gradle files api : Success quality { excludeSources = fileTree ( 'build/generated' ) } This will exclude all files in 'generated' directory from quality tools checks. Note As with patterns exclude, this will not affect animalsniffer. For spotbugs (findbugs), plugin will add excluded classes to exclude filter. Another example, just to show how flexible it could be configured: quality { excludeSources = fileTree ( 'build/generated' ). matching { include '**/sample/**/*.java' } } Exclude all java sources in sample package (in generated directory). Include pattern here will work relatively to build/generated directory. You can use even single files: quality { excludeSources = files ( 'build/generated/java/com/mypkg/Bad.java' ) } Exclude options could be used together (exclude files and patterns).","title":"Exclusion"},{"location":"guide/exclusion/#exclusions","text":"","title":"Exclusions"},{"location":"guide/exclusion/#exclude-files-from-check","text":"All quality tasks are based on SourceTask which allows excluding sources using ant patterns. To apply exclusion to all plugins at once use: quality { exclude '**/sample/**' } Note This will not affect animalsniffer plugin, because it checks different thing (binary compatibility) and use it's own configuration to configure exclusions . Info Spotbugs (findbugs) task does not support exclusions on task level, so plugin manually resolve all excluded classes and add them to spotbugs (findbugs) excludes filter xml file (default or custom user file). As a result, exclusion works the same way for all plugins. Note Exclusion patterns are resolved on relative paths (relative to source dir), so absolute file path matching will not work. Your pattern must match just \"package\" and file name parts. If you need to exclude on full paths then use direct source exclusion .","title":"Exclude files from check"},{"location":"guide/exclusion/#alternative-configurations","text":"All of the following configurations are allowed: quality { exclude '**/Sample.java' , 'com/foo/**' } quality { exclude '**/Sample.java' exclude 'com/foo/**' } quality { exclude = [ '**/Sample.java' , 'com/foo/**' ] }","title":"Alternative configurations"},{"location":"guide/exclusion/#direct-source-exclusions","text":"When you need to exclude sources from check, you should consider: Extract such sources into it's own source set and exclude this set from check. (generated classes case) Use pattern excludes (see above) to exclude sources based on package and (or) file name If non of the above works for you, then you did sources configuration not according to best practices. Anyway, there is last resort option for such cases (when it could not be done the right way). Suppose we have generated sources, added to main source set: sourceSets . main { java { srcDir 'build/generated/java' } } Here we have two source dirs for java sources: src/main/java and build/generated/java . We want to exclude them from quality check, so we try: Fail quality { exclude '**/generated/**' } which WILL NOT WORK because gradle applies patterns relatively to build/generated/java directory and so our patter will never match. Instead, specify ignored files directly, using rich gradle files api : Success quality { excludeSources = fileTree ( 'build/generated' ) } This will exclude all files in 'generated' directory from quality tools checks. Note As with patterns exclude, this will not affect animalsniffer. For spotbugs (findbugs), plugin will add excluded classes to exclude filter. Another example, just to show how flexible it could be configured: quality { excludeSources = fileTree ( 'build/generated' ). matching { include '**/sample/**/*.java' } } Exclude all java sources in sample package (in generated directory). Include pattern here will work relatively to build/generated directory. You can use even single files: quality { excludeSources = files ( 'build/generated/java/com/mypkg/Bad.java' ) } Exclude options could be used together (exclude files and patterns).","title":"Direct source exclusions"},{"location":"guide/profile/","text":"Profiling \u00b6 Gradle profile report ( --profile option ) shows quality tools tasks time (checkstyleMain, pmdMain etc), which includes both tool execution time and console reporting (performed by quality plugin). If you need to know exact console reporting time use --info option. Plugin writes reporting execution time as info log (see log messages starting with [plugin:quality] just after quality tools logs). Alternatively, you can disable console reporting and run quality tasks with --profile again to see \"pure\" quality plugins time.","title":"Profile"},{"location":"guide/profile/#profiling","text":"Gradle profile report ( --profile option ) shows quality tools tasks time (checkstyleMain, pmdMain etc), which includes both tool execution time and console reporting (performed by quality plugin). If you need to know exact console reporting time use --info option. Plugin writes reporting execution time as info log (see log messages starting with [plugin:quality] just after quality tools logs). Alternatively, you can disable console reporting and run quality tasks with --profile again to see \"pure\" quality plugins time.","title":"Profiling"},{"location":"task/config/","text":"Copy configs task \u00b6 initQualityConfig task Plugin contains predefined configurations for all plugins. During execution default files are copied into $buildDir/quality-configs (if no custom user configs provided). If you want to customize default configs then use the following task to copy everything into project: $ gradlew initQualityConfig It will copy all configs into configured ( quality.configDir ) folder (will not override existing configs). gradle\\ config\\ checkstyle\\ checkstyle.xml codenarc\\ codenarc.xml findbugs\\ exclude.xml html-report-style.xsl pmd\\ pmd.xml spotbugs\\ exclude.xml html-report-style.xsl Note Only one of spotbugs or findbugs folder will be copied (depends on what plugin is enabled - by default SpotBugs). Task copies all configs, but you may remove all files you don't want to customize (plugin will use default versions for them). File names are important: if you rename files plugin will not find them and use defaults. Configuration files contain all possible rules. Not used rules are commented (or excluded).","title":"Copy config"},{"location":"task/config/#copy-configs-task","text":"initQualityConfig task Plugin contains predefined configurations for all plugins. During execution default files are copied into $buildDir/quality-configs (if no custom user configs provided). If you want to customize default configs then use the following task to copy everything into project: $ gradlew initQualityConfig It will copy all configs into configured ( quality.configDir ) folder (will not override existing configs). gradle\\ config\\ checkstyle\\ checkstyle.xml codenarc\\ codenarc.xml findbugs\\ exclude.xml html-report-style.xsl pmd\\ pmd.xml spotbugs\\ exclude.xml html-report-style.xsl Note Only one of spotbugs or findbugs folder will be copied (depends on what plugin is enabled - by default SpotBugs). Task copies all configs, but you may remove all files you don't want to customize (plugin will use default versions for them). File names are important: if you rename files plugin will not find them and use defaults. Configuration files contain all possible rules. Not used rules are commented (or excluded).","title":"Copy configs task"},{"location":"task/group/","text":"Grouping tasks \u00b6 checkQuality[Main] task Each quality plugin (checkstyle, pmd, spotbugs etc) registers separate quality task for each source set. For example, checkstyleMain and checkstyleTest . But check task will only depend on tasks for configured source sets ( quality.sourceSets ). For example, by default, only main source set is configured, so only checkstyleMain assigned to check . Anyway, checkstyleTest task is registered and may be called directly (even if it's not used for project validation). By analogy, quality plugin register grouping task for each available source set: checkQualityMain , checkQualityTest etc. These tasks simply calls all quality tasks relative to source set. For example, if we have java quality plugins registered then calling checkQualityMain will call checkstyleMain , pmdMain and spotbugsMain . This is just a handy shortcut to run quality check tasks for exact source set without running tests (like main check ). Generally usable to periodically check code violations.","title":"Group"},{"location":"task/group/#grouping-tasks","text":"checkQuality[Main] task Each quality plugin (checkstyle, pmd, spotbugs etc) registers separate quality task for each source set. For example, checkstyleMain and checkstyleTest . But check task will only depend on tasks for configured source sets ( quality.sourceSets ). For example, by default, only main source set is configured, so only checkstyleMain assigned to check . Anyway, checkstyleTest task is registered and may be called directly (even if it's not used for project validation). By analogy, quality plugin register grouping task for each available source set: checkQualityMain , checkQualityTest etc. These tasks simply calls all quality tasks relative to source set. For example, if we have java quality plugins registered then calling checkQualityMain will call checkstyleMain , pmdMain and spotbugsMain . This is just a handy shortcut to run quality check tasks for exact source set without running tests (like main check ). Generally usable to periodically check code violations.","title":"Grouping tasks"},{"location":"tool/animalsniffer/","text":"Animalsniffer \u00b6 Java, Groovy | Home | Plugin In contrast to other tools, animalsniffer plugin is never activated automatically. Plugin will only apply common configuration (used source sets, strict mode) if ru.vyarus.animalsniffer plugin manually applied. Config \u00b6 Animalsniffer version could be defined through quality config: quality { animalsnifferVersion = '1.16' } Default version is not declared and animalsniffer plugin driven version will be used by default. Quality configuration is applied to animalsniffer configuration like this: animalsniffer { toolVersion = extension . animalsnifferVersion ignoreFailures = ! extension . strict sourceSets = extension . sourceSets }","title":"Animalsniffer"},{"location":"tool/animalsniffer/#animalsniffer","text":"Java, Groovy | Home | Plugin In contrast to other tools, animalsniffer plugin is never activated automatically. Plugin will only apply common configuration (used source sets, strict mode) if ru.vyarus.animalsniffer plugin manually applied.","title":"Animalsniffer"},{"location":"tool/animalsniffer/#config","text":"Animalsniffer version could be defined through quality config: quality { animalsnifferVersion = '1.16' } Default version is not declared and animalsniffer plugin driven version will be used by default. Quality configuration is applied to animalsniffer configuration like this: animalsniffer { toolVersion = extension . animalsnifferVersion ignoreFailures = ! extension . strict sourceSets = extension . sourceSets }","title":"Config"},{"location":"tool/checkstyle/","text":"Checkstyle \u00b6 Java | Home | Release Notes | Plugin By default, plugin is activated if java sources available ( src/main/java ). Default config contains all possible checks, but some of them are disabled (note that some checkstyle rules are opposite and never intended to be used together). Uncomment check to enable it. Output \u00b6 8 Checkstyle rule violations were found in 2 files [Misc | NewlineAtEndOfFile] sample.(Sample.java:1) File does not end with a newline. http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile ... Config \u00b6 Tool config options with defaults: quality { checkstyleVersion = '8.17' checkstyle = true // false to disable automatic plugin activation } Suppress \u00b6 To suppress violation : @SuppressWarnings ( \"NewlineAtEndOfFile\" ) Or with prefix (but require lower cased name): @SuppressWarnings ( \"checkstyle:newlineatendoffile\" ) To suppress all violations: @SuppressWarnings ( \"all\" ) Or using comments : // CHECKSTYLE:OFF .. anything .. // CHECKSTYLE:ON","title":"Checkstyle"},{"location":"tool/checkstyle/#checkstyle","text":"Java | Home | Release Notes | Plugin By default, plugin is activated if java sources available ( src/main/java ). Default config contains all possible checks, but some of them are disabled (note that some checkstyle rules are opposite and never intended to be used together). Uncomment check to enable it.","title":"Checkstyle"},{"location":"tool/checkstyle/#output","text":"8 Checkstyle rule violations were found in 2 files [Misc | NewlineAtEndOfFile] sample.(Sample.java:1) File does not end with a newline. http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile ...","title":"Output"},{"location":"tool/checkstyle/#config","text":"Tool config options with defaults: quality { checkstyleVersion = '8.17' checkstyle = true // false to disable automatic plugin activation }","title":"Config"},{"location":"tool/checkstyle/#suppress","text":"To suppress violation : @SuppressWarnings ( \"NewlineAtEndOfFile\" ) Or with prefix (but require lower cased name): @SuppressWarnings ( \"checkstyle:newlineatendoffile\" ) To suppress all violations: @SuppressWarnings ( \"all\" ) Or using comments : // CHECKSTYLE:OFF .. anything .. // CHECKSTYLE:ON","title":"Suppress"},{"location":"tool/codenarc/","text":"Checkstyle \u00b6 Groovy | Home | Release Notes | Plugin By default, plugin is activated if groovy sources available ( src/main/groovy ). Output \u00b6 24 (0 / 10 / 14) CodeNarc violations were found in 2 files [Formatting | ClassJavadoc] sample.(GSample.groovy:3) [priority 2] >> class GSample { Class sample.GSample missing Javadoc Makes sure each class and interface definition is preceded by javadoc. Enum definitions are not checked, due to strange behavior in the Groovy AST. http://codenarc.sourceforge.net/codenarc-rules-formatting.html#ClassJavadoc ... Counts in braces show priorities (p1/p2/p3). Config \u00b6 Tool config options with defaults: quality { codenarcVersion = '1.3' codenarc = true // false to disable automatic plugin activation } Suppress \u00b6 To suppress violation : @SuppressWarnings ( \"ClassJavadoc\" )","title":"CodeNarc"},{"location":"tool/codenarc/#checkstyle","text":"Groovy | Home | Release Notes | Plugin By default, plugin is activated if groovy sources available ( src/main/groovy ).","title":"Checkstyle"},{"location":"tool/codenarc/#output","text":"24 (0 / 10 / 14) CodeNarc violations were found in 2 files [Formatting | ClassJavadoc] sample.(GSample.groovy:3) [priority 2] >> class GSample { Class sample.GSample missing Javadoc Makes sure each class and interface definition is preceded by javadoc. Enum definitions are not checked, due to strange behavior in the Groovy AST. http://codenarc.sourceforge.net/codenarc-rules-formatting.html#ClassJavadoc ... Counts in braces show priorities (p1/p2/p3).","title":"Output"},{"location":"tool/codenarc/#config","text":"Tool config options with defaults: quality { codenarcVersion = '1.3' codenarc = true // false to disable automatic plugin activation }","title":"Config"},{"location":"tool/codenarc/#suppress","text":"To suppress violation : @SuppressWarnings ( \"ClassJavadoc\" )","title":"Suppress"},{"location":"tool/findbugs/","text":"FindBugs \u00b6 Java | Home | Release Notes | Plugin Danger FindBugs support is deprecated, because project is abandoned. Use SpotBugs successor project instead. By default, quality plugin will activate SpotBugs and not findbugs. Migration If you were using custom configs then rename findbugs folder to spotbugs . If plugins were used then change findbugsPlugins to spotbugsPlugins . Migration guide Hint If you want to continue using FindBugs instead of SpotBugs then simply disable spotbugs: quality.spotbugs = false . This will force automatic findbugs activation, as before. If findbugs plugin is enabled manually (in plugins section) then spotbugs will not be activated automatically and findbugs will be configured. FindBugs support is marked as deprecated, but it will not be removed soon. By default, plugin is activated if java sources available ( src/main/java ) and spotbugs plugin disabled (or findbugs plugin enabled manually). Findbugs configuration differ from other tools (checkstyle, pmd): instead of exact rules configuration it uses efforts level. Deeper level could reveal more bugs, but with higher mistake possibility. Default settings ('max' effort and 'medium' level) are perfect for most cases. Note Special xsl file used for manual html report generation because findbugs plugin could generate either xml or html report and not both. Output \u00b6 2 (0 / 2 / 0) FindBugs violations were found in 2 files [Performance | URF_UNREAD_FIELD] sample.(Sample.java:8) [priority 2] >> Unread field: sample.Sample.sample This field is never read. Consider removing it from the class. ... Counts in braces show priorities (p1/p2/p3). Note There is no link to findbugs site (like other tools), because report already contains everything from there. Config \u00b6 Tool config options with defaults: quality { findbugsVersion = '3.0.1' findbugs = true // false to disable automatic plugin activation findbugsEffort = 'max' // min, default or max findbugsLevel = 'medium' // low, medium, high } Suppress \u00b6 To suppress violations you can use filter file . In this case you need to override default filter file . Or you can use annotations. FindBugs use custom annotations and so you need to add com.google.code.findbugs:annotations:3.0.0 dependency (with provided scope if possible) and use: @SuppressFBWarnings ( \"URF_UNREAD_FIELD\" ) Plugins \u00b6 You may add additional findbugs checks by declaring findbugs plugins in findbugsPlugins dependency configuration. Warning As, by default, findbugs plugin is automatically applied after configuration read, findbugsPlugins can't be used directly Either use afterEvaluate: afterEvaluate { dependencies { findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:6.4.1' } } Or declare findbugs plugin manually (it will be configured by quality plugin): plugins { id 'findbugs' } dependencies { findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:6.4.1' } Available plugins \u00b6 Find Security Bugs findbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.4.4' fb-contrib: A FindBugs auxiliary detector plugin findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:6.6.0' Annotations \u00b6 You may use jsr305 annotations to guide findbugs. Add com.google.code.findbugs:jsr305:3.0.0 dependency (with provided scope if possible). In some cases you will have to use it. For example, you may face issues with guava functions or predicates: [NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE] input must be nonnull but is marked as nullable The reason for this is that guava use @Nullable annotation, which is @Inherited , so even if you not set annotation on your own function or predicate it will still be visible. The simplest workaround is to set @Nonnull annotation (jsr305) on your function or predicate: public boolean apply ( @Nonnull final Object input ) {","title":"FindBugs"},{"location":"tool/findbugs/#findbugs","text":"Java | Home | Release Notes | Plugin Danger FindBugs support is deprecated, because project is abandoned. Use SpotBugs successor project instead. By default, quality plugin will activate SpotBugs and not findbugs. Migration If you were using custom configs then rename findbugs folder to spotbugs . If plugins were used then change findbugsPlugins to spotbugsPlugins . Migration guide Hint If you want to continue using FindBugs instead of SpotBugs then simply disable spotbugs: quality.spotbugs = false . This will force automatic findbugs activation, as before. If findbugs plugin is enabled manually (in plugins section) then spotbugs will not be activated automatically and findbugs will be configured. FindBugs support is marked as deprecated, but it will not be removed soon. By default, plugin is activated if java sources available ( src/main/java ) and spotbugs plugin disabled (or findbugs plugin enabled manually). Findbugs configuration differ from other tools (checkstyle, pmd): instead of exact rules configuration it uses efforts level. Deeper level could reveal more bugs, but with higher mistake possibility. Default settings ('max' effort and 'medium' level) are perfect for most cases. Note Special xsl file used for manual html report generation because findbugs plugin could generate either xml or html report and not both.","title":"FindBugs"},{"location":"tool/findbugs/#output","text":"2 (0 / 2 / 0) FindBugs violations were found in 2 files [Performance | URF_UNREAD_FIELD] sample.(Sample.java:8) [priority 2] >> Unread field: sample.Sample.sample This field is never read. Consider removing it from the class. ... Counts in braces show priorities (p1/p2/p3). Note There is no link to findbugs site (like other tools), because report already contains everything from there.","title":"Output"},{"location":"tool/findbugs/#config","text":"Tool config options with defaults: quality { findbugsVersion = '3.0.1' findbugs = true // false to disable automatic plugin activation findbugsEffort = 'max' // min, default or max findbugsLevel = 'medium' // low, medium, high }","title":"Config"},{"location":"tool/findbugs/#suppress","text":"To suppress violations you can use filter file . In this case you need to override default filter file . Or you can use annotations. FindBugs use custom annotations and so you need to add com.google.code.findbugs:annotations:3.0.0 dependency (with provided scope if possible) and use: @SuppressFBWarnings ( \"URF_UNREAD_FIELD\" )","title":"Suppress"},{"location":"tool/findbugs/#plugins","text":"You may add additional findbugs checks by declaring findbugs plugins in findbugsPlugins dependency configuration. Warning As, by default, findbugs plugin is automatically applied after configuration read, findbugsPlugins can't be used directly Either use afterEvaluate: afterEvaluate { dependencies { findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:6.4.1' } } Or declare findbugs plugin manually (it will be configured by quality plugin): plugins { id 'findbugs' } dependencies { findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:6.4.1' }","title":"Plugins"},{"location":"tool/findbugs/#available-plugins","text":"Find Security Bugs findbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.4.4' fb-contrib: A FindBugs auxiliary detector plugin findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:6.6.0'","title":"Available plugins"},{"location":"tool/findbugs/#annotations","text":"You may use jsr305 annotations to guide findbugs. Add com.google.code.findbugs:jsr305:3.0.0 dependency (with provided scope if possible). In some cases you will have to use it. For example, you may face issues with guava functions or predicates: [NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE] input must be nonnull but is marked as nullable The reason for this is that guava use @Nullable annotation, which is @Inherited , so even if you not set annotation on your own function or predicate it will still be visible. The simplest workaround is to set @Nonnull annotation (jsr305) on your function or predicate: public boolean apply ( @Nonnull final Object input ) {","title":"Annotations"},{"location":"tool/lint/","text":"Javac lint \u00b6 Java | Home Javac linter could show more useful warnings (not visible by default). See the list of all options . Configuration \u00b6 By default, plugin will enable deprecation and unchecked warnings (as the most useful): quality { lintOptions = [ 'deprecation' , 'unchecked' ] } These lint options are applied to all registered CompileJava tasks.","title":"Javac lint"},{"location":"tool/lint/#javac-lint","text":"Java | Home Javac linter could show more useful warnings (not visible by default). See the list of all options .","title":"Javac lint"},{"location":"tool/lint/#configuration","text":"By default, plugin will enable deprecation and unchecked warnings (as the most useful): quality { lintOptions = [ 'deprecation' , 'unchecked' ] } These lint options are applied to all registered CompileJava tasks.","title":"Configuration"},{"location":"tool/pmd/","text":"PMD \u00b6 Java | Home | Release Notes | Plugin By default, plugin is activated if java sources available ( src/main/java ). Default config contains all java checks, but some of them are disabled. Remove exclusion to enable disabled rule. Warning Pmd 6.0 changed rule groups . Default confing was rewritten accordingly. Output \u00b6 23 PMD rule violations were found in 2 files [Comments | CommentRequired] sample.(Sample.java:3) headerCommentRequirement Required https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired ... Config \u00b6 Tool config options with defaults: quality { pmdVersion = '6.11.0' pmd = true // false to disable automatic plugin activation } Suppress \u00b6 To suppress violation : @SuppressWarnings ( \"PMD.CommentRequired\" ) To suppress all violations: @SuppressWarnings ( \"PMD\" )","title":"PMD"},{"location":"tool/pmd/#pmd","text":"Java | Home | Release Notes | Plugin By default, plugin is activated if java sources available ( src/main/java ). Default config contains all java checks, but some of them are disabled. Remove exclusion to enable disabled rule. Warning Pmd 6.0 changed rule groups . Default confing was rewritten accordingly.","title":"PMD"},{"location":"tool/pmd/#output","text":"23 PMD rule violations were found in 2 files [Comments | CommentRequired] sample.(Sample.java:3) headerCommentRequirement Required https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired ...","title":"Output"},{"location":"tool/pmd/#config","text":"Tool config options with defaults: quality { pmdVersion = '6.11.0' pmd = true // false to disable automatic plugin activation }","title":"Config"},{"location":"tool/pmd/#suppress","text":"To suppress violation : @SuppressWarnings ( \"PMD.CommentRequired\" ) To suppress all violations: @SuppressWarnings ( \"PMD\" )","title":"Suppress"},{"location":"tool/spotbugs/","text":"SpotBugs \u00b6 Java | Home | Release Notes | Plugin Info SpotBugs is a successor project to deprecated FindBugs project. Migration guide . If you were using custom findbugs config before then rename it's folder to spotbugs . Warning In contrast to other plugins, spotbugs plugin is not bundled with gradle, but quality plugin will bring it as a dependency (v 1.6.5) and activate automatically. To use newer spotbugs plugin version simply enable plugin manually (in plugins section). By default, plugin is activated if java sources available ( src/main/java ). SpotBugs configuration differ from other tools (checkstyle, pmd): instead of exact rules configuration it uses efforts level . Deeper level could reveal more bugs, but with higher mistake possibility. Default settings ( max effort and medium level) are perfect for most cases. Some checks were disabled in the default filter file Note Special xsl file used for manual html report generation because spotbugs plugin could generate either xml or html report and not both. Output \u00b6 2 (0 / 2 / 0) SpotBugs violations were found in 2 files [Performance | URF_UNREAD_FIELD] sample.(Sample.java:8) [priority 2] >> Unread field: sample.Sample.sample This field is never read. Consider removing it from the class. ... Counts in braces show priorities (p1/p2/p3). Note There is no link to spotbugs site (like other tools), because report already contains everything from there . Config \u00b6 Tool config options with defaults: quality { spotbugsVersion = '3.1.11' spotbugs = true // false to disable automatic plugin activation spotbugsEffort = 'max' // min, less, more or max spotbugsLevel = 'medium' // low, medium, high } Suppress \u00b6 To suppress violations you can use filter file . In this case you need to override default filter file . Or you can use annotations. SpotBugs use custom annotations and so you need to add com.github.spotbugs:spotbugs-annotations:3.1.2 dependency (with provided scope if possible) and use: @SuppressFBWarnings ( \"URF_UNREAD_FIELD\" ) Abstract Spotbugs can't use default @SuppressWarnings annotation because it's a source annotation and not available in bytecode. Plugins \u00b6 You may add additional spotbugs checks by declaring spotbugs plugins in spotbugsPlugins dependency configuration. Note Spotbugs is compatible with findbugs plugins. Warning As, by default, spotbugs plugin is automatically applied after configuration read, spotbugsPlugins can't be used directly Either use afterEvaluate: afterEvaluate { dependencies { spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.2.0' } } Or declare spotbugs plugin manually (it will be configured by quality plugin): plugins { id 'com.github.spotbugs' version '1.6.5' } dependencies { spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.2.0' } Available plugins \u00b6 Find Security Bugs spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1' fb-contrib: A FindBugs auxiliary detector plugin spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.2.0' Annotations \u00b6 Use spotbugs-annotations to guide spotbugs nullability checks ( @Nonnull and @Nullable ). Add com.github.spotbugs:spotbugs-annotations:3.1.2 dependency (with provided scope if possible). Warning Before, annotations from Jsr-305 were used ( com.google.code.findbugs:jsr305 ), but now it is dead. Remove jsr-305 jar if it were used and use undeprecated @Nonnull and @Nullable In some cases you will have to use it. For example, you may face issues with guava functions or predicates: [NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE] input must be nonnull but is marked as nullable The reason for this is that guava use @Nullable annotation, which is @Inherited , so even if you not set annotation on your own function or predicate it will still be visible. The simplest workaround is to set @Nonnull annotation on your function or predicate: public boolean apply ( @Nonnull final Object input ) { Hint NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION check was disabled because it does not allow this workaround to work Abstract Guava is now using checker framework instead of jsr-305 .","title":"SpotBugs"},{"location":"tool/spotbugs/#spotbugs","text":"Java | Home | Release Notes | Plugin Info SpotBugs is a successor project to deprecated FindBugs project. Migration guide . If you were using custom findbugs config before then rename it's folder to spotbugs . Warning In contrast to other plugins, spotbugs plugin is not bundled with gradle, but quality plugin will bring it as a dependency (v 1.6.5) and activate automatically. To use newer spotbugs plugin version simply enable plugin manually (in plugins section). By default, plugin is activated if java sources available ( src/main/java ). SpotBugs configuration differ from other tools (checkstyle, pmd): instead of exact rules configuration it uses efforts level . Deeper level could reveal more bugs, but with higher mistake possibility. Default settings ( max effort and medium level) are perfect for most cases. Some checks were disabled in the default filter file Note Special xsl file used for manual html report generation because spotbugs plugin could generate either xml or html report and not both.","title":"SpotBugs"},{"location":"tool/spotbugs/#output","text":"2 (0 / 2 / 0) SpotBugs violations were found in 2 files [Performance | URF_UNREAD_FIELD] sample.(Sample.java:8) [priority 2] >> Unread field: sample.Sample.sample This field is never read. Consider removing it from the class. ... Counts in braces show priorities (p1/p2/p3). Note There is no link to spotbugs site (like other tools), because report already contains everything from there .","title":"Output"},{"location":"tool/spotbugs/#config","text":"Tool config options with defaults: quality { spotbugsVersion = '3.1.11' spotbugs = true // false to disable automatic plugin activation spotbugsEffort = 'max' // min, less, more or max spotbugsLevel = 'medium' // low, medium, high }","title":"Config"},{"location":"tool/spotbugs/#suppress","text":"To suppress violations you can use filter file . In this case you need to override default filter file . Or you can use annotations. SpotBugs use custom annotations and so you need to add com.github.spotbugs:spotbugs-annotations:3.1.2 dependency (with provided scope if possible) and use: @SuppressFBWarnings ( \"URF_UNREAD_FIELD\" ) Abstract Spotbugs can't use default @SuppressWarnings annotation because it's a source annotation and not available in bytecode.","title":"Suppress"},{"location":"tool/spotbugs/#plugins","text":"You may add additional spotbugs checks by declaring spotbugs plugins in spotbugsPlugins dependency configuration. Note Spotbugs is compatible with findbugs plugins. Warning As, by default, spotbugs plugin is automatically applied after configuration read, spotbugsPlugins can't be used directly Either use afterEvaluate: afterEvaluate { dependencies { spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.2.0' } } Or declare spotbugs plugin manually (it will be configured by quality plugin): plugins { id 'com.github.spotbugs' version '1.6.5' } dependencies { spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.2.0' }","title":"Plugins"},{"location":"tool/spotbugs/#available-plugins","text":"Find Security Bugs spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1' fb-contrib: A FindBugs auxiliary detector plugin spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.2.0'","title":"Available plugins"},{"location":"tool/spotbugs/#annotations","text":"Use spotbugs-annotations to guide spotbugs nullability checks ( @Nonnull and @Nullable ). Add com.github.spotbugs:spotbugs-annotations:3.1.2 dependency (with provided scope if possible). Warning Before, annotations from Jsr-305 were used ( com.google.code.findbugs:jsr305 ), but now it is dead. Remove jsr-305 jar if it were used and use undeprecated @Nonnull and @Nullable In some cases you will have to use it. For example, you may face issues with guava functions or predicates: [NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE] input must be nonnull but is marked as nullable The reason for this is that guava use @Nullable annotation, which is @Inherited , so even if you not set annotation on your own function or predicate it will still be visible. The simplest workaround is to set @Nonnull annotation on your function or predicate: public boolean apply ( @Nonnull final Object input ) { Hint NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION check was disabled because it does not allow this workaround to work Abstract Guava is now using checker framework instead of jsr-305 .","title":"Annotations"}]}